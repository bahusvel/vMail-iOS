// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file auth.proto

import Foundation
import ProtocolBuffers


public struct Vproto { }

public func == (lhs: Vproto.AuthRequest, rhs: Vproto.AuthRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Vproto.AuthResponse, rhs: Vproto.AuthResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSuccess == rhs.hasSuccess) && (!lhs.hasSuccess || lhs.success == rhs.success)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Vproto {
  public struct AuthRoot {
    public static var sharedInstance : AuthRoot {
     struct Static {
         static let instance : AuthRoot = AuthRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class AuthRequest : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var username:String = ""

    public private(set) var hasUsername:Bool = false
    public private(set) var password:String = ""

    public private(set) var hasPassword:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasUsername {
        return false
      }
      if !hasPassword {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUsername {
        try output.writeString(1, value:username)
      }
      if hasPassword {
        try output.writeString(2, value:password)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUsername {
        serialize_size += username.computeStringSize(1)
      }
      if hasPassword {
        serialize_size += password.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Vproto.AuthRequest> {
      var mergedArray = Array<Vproto.AuthRequest>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Vproto.AuthRequest? {
      return try Vproto.AuthRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Vproto.AuthRequest {
      return try Vproto.AuthRequest.Builder().mergeFromData(data, extensionRegistry:Vproto.AuthRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Vproto.AuthRequest {
      return try Vproto.AuthRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Vproto.AuthRequest {
      return try Vproto.AuthRequest.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Vproto.AuthRequest {
      return try Vproto.AuthRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Vproto.AuthRequest {
      return try Vproto.AuthRequest.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Vproto.AuthRequest {
      return try Vproto.AuthRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Vproto.AuthRequest.Builder {
      return Vproto.AuthRequest.classBuilder() as! Vproto.AuthRequest.Builder
    }
    public func getBuilder() -> Vproto.AuthRequest.Builder {
      return classBuilder() as! Vproto.AuthRequest.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Vproto.AuthRequest.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Vproto.AuthRequest.Builder()
    }
    public func toBuilder() throws -> Vproto.AuthRequest.Builder {
      return try Vproto.AuthRequest.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Vproto.AuthRequest) throws -> Vproto.AuthRequest.Builder {
      return try Vproto.AuthRequest.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasUsername {
        output += "\(indent) username: \(username) \n"
      }
      if hasPassword {
        output += "\(indent) password: \(password) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUsername {
               hashCode = (hashCode &* 31) &+ username.hashValue
            }
            if hasPassword {
               hashCode = (hashCode &* 31) &+ password.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Vproto.AuthRequest"
    }
    override public func className() -> String {
        return "Vproto.AuthRequest"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Vproto.AuthRequest.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Vproto.AuthRequest = Vproto.AuthRequest()
      public func getMessage() -> Vproto.AuthRequest {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUsername:Bool {
           get {
                return builderResult.hasUsername
           }
      }
      public var username:String {
           get {
                return builderResult.username
           }
           set (value) {
               builderResult.hasUsername = true
               builderResult.username = value
           }
      }
      public func setUsername(value:String) -> Vproto.AuthRequest.Builder {
        self.username = value
        return self
      }
      public func clearUsername() -> Vproto.AuthRequest.Builder{
           builderResult.hasUsername = false
           builderResult.username = ""
           return self
      }
      public var hasPassword:Bool {
           get {
                return builderResult.hasPassword
           }
      }
      public var password:String {
           get {
                return builderResult.password
           }
           set (value) {
               builderResult.hasPassword = true
               builderResult.password = value
           }
      }
      public func setPassword(value:String) -> Vproto.AuthRequest.Builder {
        self.password = value
        return self
      }
      public func clearPassword() -> Vproto.AuthRequest.Builder{
           builderResult.hasPassword = false
           builderResult.password = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Vproto.AuthRequest.Builder {
        builderResult = Vproto.AuthRequest()
        return self
      }
      public override func clone() throws -> Vproto.AuthRequest.Builder {
        return try Vproto.AuthRequest.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Vproto.AuthRequest {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Vproto.AuthRequest {
        let returnMe:Vproto.AuthRequest = builderResult
        return returnMe
      }
      public func mergeFrom(other:Vproto.AuthRequest) throws -> Vproto.AuthRequest.Builder {
        if other == Vproto.AuthRequest() {
         return self
        }
        if other.hasUsername {
             username = other.username
        }
        if other.hasPassword {
             password = other.password
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Vproto.AuthRequest.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Vproto.AuthRequest.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            username = try input.readString()

          case 18 :
            password = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class AuthResponse : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var success:Bool = false

    public private(set) var hasSuccess:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasSuccess {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSuccess {
        try output.writeBool(1, value:success)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSuccess {
        serialize_size += success.computeBoolSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Vproto.AuthResponse> {
      var mergedArray = Array<Vproto.AuthResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Vproto.AuthResponse? {
      return try Vproto.AuthResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Vproto.AuthResponse {
      return try Vproto.AuthResponse.Builder().mergeFromData(data, extensionRegistry:Vproto.AuthRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Vproto.AuthResponse {
      return try Vproto.AuthResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Vproto.AuthResponse {
      return try Vproto.AuthResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Vproto.AuthResponse {
      return try Vproto.AuthResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Vproto.AuthResponse {
      return try Vproto.AuthResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Vproto.AuthResponse {
      return try Vproto.AuthResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Vproto.AuthResponse.Builder {
      return Vproto.AuthResponse.classBuilder() as! Vproto.AuthResponse.Builder
    }
    public func getBuilder() -> Vproto.AuthResponse.Builder {
      return classBuilder() as! Vproto.AuthResponse.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Vproto.AuthResponse.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Vproto.AuthResponse.Builder()
    }
    public func toBuilder() throws -> Vproto.AuthResponse.Builder {
      return try Vproto.AuthResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Vproto.AuthResponse) throws -> Vproto.AuthResponse.Builder {
      return try Vproto.AuthResponse.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasSuccess {
        output += "\(indent) success: \(success) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSuccess {
               hashCode = (hashCode &* 31) &+ success.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Vproto.AuthResponse"
    }
    override public func className() -> String {
        return "Vproto.AuthResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Vproto.AuthResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Vproto.AuthResponse = Vproto.AuthResponse()
      public func getMessage() -> Vproto.AuthResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSuccess:Bool {
           get {
                return builderResult.hasSuccess
           }
      }
      public var success:Bool {
           get {
                return builderResult.success
           }
           set (value) {
               builderResult.hasSuccess = true
               builderResult.success = value
           }
      }
      public func setSuccess(value:Bool) -> Vproto.AuthResponse.Builder {
        self.success = value
        return self
      }
      public func clearSuccess() -> Vproto.AuthResponse.Builder{
           builderResult.hasSuccess = false
           builderResult.success = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Vproto.AuthResponse.Builder {
        builderResult = Vproto.AuthResponse()
        return self
      }
      public override func clone() throws -> Vproto.AuthResponse.Builder {
        return try Vproto.AuthResponse.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Vproto.AuthResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Vproto.AuthResponse {
        let returnMe:Vproto.AuthResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Vproto.AuthResponse) throws -> Vproto.AuthResponse.Builder {
        if other == Vproto.AuthResponse() {
         return self
        }
        if other.hasSuccess {
             success = other.success
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Vproto.AuthResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Vproto.AuthResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            success = try input.readBool()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
